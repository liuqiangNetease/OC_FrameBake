// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel OCVisPrepare
#pragma kernel OCVisCompute

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> OCTexture;

RWStructuredBuffer<int> OCResultBuffer;
RWStructuredBuffer<int> OCIndexBuffer;
RWStructuredBuffer<int> OCIndexLengthBuffer;
int BufferLength;
int Offset;
int Alpha;

[numthreads(1, 1, 1)]
void OCVisPrepare(uint3 id : SV_DispatchThreadID)
{
	OCResultBuffer[id.x] = 0;
	if (id.x == 0)
		OCIndexLengthBuffer[0] = 0;
}


[numthreads(1, 1, 1)]
void OCVisCompute(uint3 id : SV_DispatchThreadID)
{
	float4 color = OCTexture[id.xy];

	uint r = (uint)(255 * color.r + 0.5);
	uint g = (uint)(255 * color.g + 0.5);
	uint b = (uint)(255 * color.b + 0.5);
	uint a = (uint)(255 * color.a + 0.5);
	

	int relR = r - Offset;
	int relG = g - Offset;
	int relB = b - Offset;

	if (relR >= 0 && relG >= 0 && relB >= 0 && a == Alpha)
	{
		int N = 256 - Offset;
		int index = relR * N * N + relG * N + relB;

		if (index < BufferLength)
		{
			int originVal;
			InterlockedAdd(OCResultBuffer[index], 1, originVal);
			if (originVal == 0)
			{
				int originIndex;
				InterlockedAdd(OCIndexLengthBuffer[0], 1, originIndex);
				OCIndexBuffer[originIndex] = index;
			}
		}
	}
}